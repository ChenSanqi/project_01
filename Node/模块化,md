一、什么是模块化？
把系统或一个组织问题划分成模块的过程。
ps:把一个大文件拆分成独立并且相互依赖的多个小模块。
（复用性、可维护性、按需加载）

模块化规范：
对代码进行模块化的拆分和组合时，需要遵守的那些规则。

#node.js模块的三大类
内置模块、自定义模块、第三方模块。

#require
使用require加载其他模块时会执行里面的代码。
ps:加载用户自定义模块的时候，可以省略不写js文件的后缀名。

#模块作用域
在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制被称作模块作用域
优点：防止全局变量污染

#向外共享模块作用域中的成员
#module对象
在每个.js自定义模块中都有一个module对象，存储了和当前模块有关的信息

#module.exports对象
在自定义模块中，可以使用module.exports对象，将模块内的成员共享出去。


#exports对象
简化后的module.exports，指向的是同一个对象
ps:require()模块时，得到的永远是module.exports对象

#CommonJS模块化规范
1、每个模块内部，module变量代表当前模块
2、module变量是一个对象，它的exports属性是对外的接口
3、加载某个模块，其实是加载该模块的module.exports属性。

二、npm与包
1、什么是包？
node.js中的第三方模块又叫做包

#第三方包对时间进行格式化
格式化时间的包moment

装包命令：
npm install 包的完整名称
npm i 包的完整名称

#包的语义化版本规范
三位数字，例如：2.24.0
第一位数字：大版本
第二位数字：功能版本
第三位数字：Bug修复版本

版本号提升规则：只要前面的版本号增长了，后面的版本号数字自动归零。

#包管理配置文件package.json
记录项目的配置信息

遇到问题：第三方包的体积过大，不方便共享
解决方案：剔出node_modules目录，仅在团队成员间共享项目的源代码。

ps:在今后项目开发中，把node_modules文件夹添加到.gitignore忽略中

#快速创建package.json
npm init -y
ps：在执行命令时所处的目录中使用。

#dependencies节点
用于记录安装了哪些包。

#一次性安装所有包
npm install/npm i

#卸载包
npm uninstall 包的名称

#devDependencies节点
如果有些包只在项目开发阶段会用到，在项目上线之后不会用到，则记录到该节点，否则记录到dependencies节点。
npm i -D 包的名称 

#查看当前下包镜像源
npm config get registry

#切换淘宝镜像
npm config set registry=https://registry.npm.taobao.org/

#nrm工具
#nrm提供的终端命令，可以快速查看和切换镜像源
#通过npm包管理器，将nrm安装为全局可用的工具
npm i nrm -g
#查看所有可用的镜像源
nrm ls
#将下包的镜像源切换为淘宝
nrm use taobao

#i5ting包
能够把md文档转换为html页面的小工具
npm install -g i5ting_toc
将md文档转换为html页面
i5ting_toc -f md文件名称 -o

#规范的包结构
1、以单独的目录存在；
2、包的顶级目录，必须包含package.json这个包管理配置文件；
3、package.json中必须包含name,version,main这三个属性，分别代表包的名字、版本号、包的入口。

#开发属于自己的包
目标：
1、格式化日期
2、转移HTML中的特殊字符
3、还原HTML中的特殊字符

#登录npm账号
npm login


##发布包
npm publish 
ps:先要切换到npm的镜像源，然后定位到包的根目录

#删除已发布的包
npm unpublish 包名 --force

ps:只能删除72小时内发布的包、24小时内不允许重复发布、尽量不要往npm上发布没有意义的包

#模块的加载机制
1、优先从缓存中加载，模块在第一次加载后被缓存，使用require()不会导致多次执行，从而提交模块的加载效率。
2、内置模块的加载优先级是最高的。
3、使用自定义模块必须使用./或../开头的路径标识符，否则会被当成内置模块或第三方模块加载。
4、如果没有找到对应的第三方模块，则移动到再上一层目录中进行加载，直到文件系统的根目录。
5、当目录作为模块标识符，三种加载方式：main入口、index.js、如果前两种都失败了则会报错。